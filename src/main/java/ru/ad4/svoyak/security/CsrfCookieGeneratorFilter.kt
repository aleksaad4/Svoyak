package ru.ad4.svoyak.security

import org.springframework.security.web.csrf.CsrfToken
import org.springframework.web.filter.OncePerRequestFilter
import java.io.IOException
import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.http.Cookie
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/**
 * Filter used to put the CSRF token generated by Spring Security in a cookie for use by AngularJS.
 */
class CsrfCookieGeneratorFilter : OncePerRequestFilter() {

    @Throws(ServletException::class, IOException::class)
    override fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain) {
        // Spring put the CSRF token in session attribute "_csrf"
        val csrfToken = request.getAttribute("_csrf") as CsrfToken

        // Send the cookie only if the token has changed
        val actualToken = request.getHeader("X-CSRF-TOKEN")
        if (actualToken == null || actualToken != csrfToken.token) {
            // Session cookie that will be used by AngularJS
            val pCookieName = "CSRF-TOKEN"
            val cookie = Cookie(pCookieName, csrfToken.token)
            cookie.maxAge = -1
            cookie.isHttpOnly = false
            cookie.path = "/"
            response.addCookie(cookie)
        }
        filterChain.doFilter(request, response)
    }
}
