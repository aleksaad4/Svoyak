buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE"
        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath "com.moowork.gradle:gradle-gulp-plugin:0.12"
        classpath "gradle.plugin.com.craigburke.gradle:bower-installer-gradle:2.5.1"
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.gulp'
apply plugin: "com.craigburke.bower-installer"
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

checkstyle {
    configFile = file('codequality/checkstyle-minimal.xml')
    ignoreFailures = true
}

pmd {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    excludeFilter = file("codequality/findbugs-exclude.xml")
}

defaultTasks 'bootRun'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-mobile')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile('javax.inject:javax.inject:1')
    compile(group: 'org.hibernate', name: 'hibernate-ehcache')
}

bootRepackage {
    mainClass = 'ru.ad4.svoyak.App'
}

springBoot {
    mainClass = 'ru.ad4.svoyak.App'
    executable = true
}

bootRun {
    addResources = false
}

test {
    include '**/*UnitTest*'
    include '**/*IntTest*'

    ignoreFailures true
    reports.html.enabled = false
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

compileJava.dependsOn(processResources)

clean {
    delete "target"
}

// настрйоки для девелоперского профиля
def logbackLoglevel = 'DEBUG';
def dpProfile = 'dev';

// если запускаем с prod профилем -> обновляем настройки
if (project.hasProperty('dbprofile') && project.property('dbprofile') == 'prod') {
    logbackLoglevel = 'INFO';
    dpProfile = 'prod';
}

bootRun {
    args = ["--spring.profiles.active=" + dpProfile]
}

task setProdProperties(dependsOn: bootRun) << {
    doFirst {
        System.setProperty('spring.profiles.active', dpProfile)
    }
}

processResources {
    filesMatching('**/logback-**') {
        filter {
            it.replace('@logback.loglevel@', logbackLoglevel)
        }
    }
}

bootRun.dependsOn 'gulp_' + (dpProfile == 'prod' ? 'prod' : 'build')
